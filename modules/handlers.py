import logging
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ChatType
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

from .config import Config
from .database import DatabaseError, DatabaseManager


logger = logging.getLogger(__name__)


class MessageTemplates:
    USER_START = (
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å? –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.\n\n"
        "‚ÑπÔ∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã."
    )
    
    USER_START_EXISTING = (
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–ß–µ–º –º–æ–∂–µ–º –ø–æ–º–æ—á—å? –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.\n\n"
        "‚ÑπÔ∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã."
    )
    
    SUPPORT_USER_INFO = (
        "‚ÑπÔ∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "üë§ –ò–º—è: {user_name}\n"
        "üÜî ID: {user_id}\n\n"
        "üí¨ –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–≤—ã–º."
    )
    
    ERROR_CREATION = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    ERROR_NOT_STARTED = "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    ERROR_SEND_MESSAGE = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    ERROR_USER_NOT_FOUND = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞"
    ERROR_SEND_TO_USER = "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"


def get_user_button(user_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    url=f"tg://user?id={user_id}"
                )
            ]
        ]
    )
    return keyboard


def register_handlers(
    dp: Dispatcher,
    db_manager: DatabaseManager,
    config: Config
) -> None:
    
    @dp.message(Command("start"), F.chat.type == ChatType.PRIVATE)
    async def cmd_start(message: Message, bot: Bot) -> None:
        if not message.from_user:
            return
        
        user_id: int = message.from_user.id
        user_name: str = message.from_user.full_name or f"User{user_id}"
        
        try:
            existing_topic: Optional[int] = await db_manager.get_user_topic(user_id)
            
            if existing_topic:
                await message.answer(MessageTemplates.USER_START_EXISTING)
                return
            
            topic = await bot.create_forum_topic(
                chat_id=config.support_group_id,
                name=user_name[:128]
            )
            
            topic_id: int = topic.message_thread_id
            
            await db_manager.create_user_topic(user_id, topic_id)
            
            await message.answer(MessageTemplates.USER_START)
            
            await bot.send_message(
                chat_id=config.support_group_id,
                message_thread_id=topic_id,
                text=MessageTemplates.SUPPORT_USER_INFO.format(
                    user_id=user_id,
                    user_name=user_name
                ),
                reply_markup=get_user_button(user_id)
            )
            
        except TelegramBadRequest as e:
            logger.error(
                f"Telegram –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ –¥–ª—è user_id={user_id}: {e}"
            )
            await message.answer(MessageTemplates.ERROR_CREATION)
        except DatabaseError as e:
            logger.error(f"–ë–î –æ—à–∏–±–∫–∞ –¥–ª—è user_id={user_id}: {e}")
            await message.answer(MessageTemplates.ERROR_CREATION)
        except Exception as e:
            logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è user_id={user_id}: {e}")
            await message.answer(MessageTemplates.ERROR_CREATION)
    
    @dp.message(F.chat.type == ChatType.PRIVATE)
    async def handle_user_message(message: Message, bot: Bot) -> None:
        if not message.from_user:
            return
        
        user_id: int = message.from_user.id
        
        try:
            topic_id: Optional[int] = await db_manager.get_user_topic(user_id)
            
            if not topic_id:
                await message.answer(MessageTemplates.ERROR_NOT_STARTED)
                return
            
            await bot.copy_message(
                chat_id=config.support_group_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id,
                message_thread_id=topic_id
            )
            
        except TelegramAPIError as e:
            logger.error(
                f"Telegram –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç user_id={user_id}: {e}"
            )
            await message.answer(MessageTemplates.ERROR_SEND_MESSAGE)
        except DatabaseError as e:
            logger.error(f"–ë–î –æ—à–∏–±–∫–∞ –¥–ª—è user_id={user_id}: {e}")
            await message.answer(MessageTemplates.ERROR_SEND_MESSAGE)
        except Exception as e:
            logger.exception(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}: {e}"
            )
            await message.answer(MessageTemplates.ERROR_SEND_MESSAGE)
    
    @dp.message(
        F.chat.id == config.support_group_id,
        F.message_thread_id.as_("thread_id")
    )
    async def handle_support_reply(
        message: Message,
        bot: Bot,
        thread_id: int
    ) -> None:
        try:
            user_id: Optional[int] = await db_manager.get_user_by_topic(thread_id)
            
            if not user_id:
                await message.reply(MessageTemplates.ERROR_USER_NOT_FOUND)
                return
            
            await bot.copy_message(
                chat_id=user_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
            
        except TelegramAPIError as e:
            logger.error(
                f"Telegram –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={user_id}: {e}"
            )
            await message.reply(MessageTemplates.ERROR_SEND_TO_USER)
        except DatabaseError as e:
            logger.error(f"–ë–î –æ—à–∏–±–∫–∞ –¥–ª—è topic_id={thread_id}: {e}")
            await message.reply(MessageTemplates.ERROR_SEND_TO_USER)
        except Exception as e:
            logger.exception(
                f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ user_id={user_id}: {e}"
            )
            await message.reply(MessageTemplates.ERROR_SEND_TO_USER)
